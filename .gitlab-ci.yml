variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME


stages:
  - build-docker-image
  - setup-environment-directories
  - build-docker-compose
  - merge-feature-to-dev


build-docker-image-job:
  stage: build-docker-image
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build -t ${IMAGE_NAME} .;
    - docker push ${IMAGE_NAME};
  tags:
    - backend
  only:
    - feature
    - dev
    - main


setup-job:
  stage: setup-environment-directories
  image: ubuntu:latest
  script:
    - apt-get update
    - apt-get install -y openssl
    - mkdir -p certs env_files
    - touch env_files/.env env_files/.env.db env_files/.env.email env_files/.env.tasks
    - openssl genrsa -out certs/jwt-private.pem 2048
    - openssl rsa -in certs/jwt-private.pem -outform PEM -pubout -out certs/jwt-public.pem
    - cat "$ENV_FILE" > env_files/.env
    - cat "$ENV_FILE_DB" > env_files/.env.db
    - cat "$ENV_FILE_EMAIL" > env_files/.env.email
    - cat "$ENV_FILE_TASKS" > env_files/.env.tasks
  artifacts:
    paths:
      - certs/
      - env_files/
  tags:
    - backend
  only:
    - feature
    - dev
    - main


build-docker-compose-job:
  stage: build-docker-compose
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker pull ${IMAGE_NAME}
    - IMAGE_NAME=${IMAGE_NAME} docker compose up -d
  tags:
    - backend
  only:
    - feature
    - dev
    - main


merge-feature-to-dev-job:
  stage: merge-feature-to-dev
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y git ssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - git config --global user.name "Vladislav1234512345"
    - git config --global user.email "tolerantniy2104@gmail.com"
  script:
    - git remote set-url origin git@gitlab.com:top10edu/backend.git
    - git fetch origin
    - | 
      if git show-ref --verify  --quiet refs/heads/dev; then
        echo "a branch named 'dev' already exists";
        git branch -D dev;
        echo "dev branch was deleted."
      else
        echo "Switched to a new branch 'dev'";
      fi
    - git checkout -b dev;
    - git merge origin/feature
    - git push origin dev --force
  tags:
    - backend
  only:
    - feature


